'use client';

import { useState } from 'react';
import { Download, FileText, Share2, Loader2 } from 'lucide-react';
import jsPDF from 'jspdf';

interface AnalysisData {
  topic: string;
  summary: string;
  marketTrends: string;
  keyPlayers: string;
  useCases: string;
  challenges: string;
}

interface ExportOptionsProps {
  data: AnalysisData;
}

export default function ExportOptions({ data }: ExportOptionsProps) {
  const [isExporting, setIsExporting] = useState<string | null>(null);
  const [shareableLink, setShareableLink] = useState<string | null>(null);

  const exportToPDF = () => {
    setIsExporting('pdf');
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      const lineHeight = 7;
      let yPosition = margin;

      // Helper function to add text with word wrapping
      const addText = (text: string, fontSize = 12, isBold = false) => {
        pdf.setFontSize(fontSize);
        pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
        
        const splitText = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        
        // Check if we need a new page
        if (yPosition + splitText.length * lineHeight > pdf.internal.pageSize.getHeight() - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.text(splitText, margin, yPosition);
        yPosition += splitText.length * lineHeight + 5;
      };

      // Title
      addText('GenAI-Scout Lite Analysis Report', 20, true);
      yPosition += 10;

      // Topic
      addText(`Topic: ${data.topic}`, 14, true);
      yPosition += 10;

      // Date
      addText(`Generated: ${new Date().toLocaleDateString()}`, 10);
      yPosition += 15;

      // Sections
      const sections = [
        { title: 'Technology Overview', content: data.summary },
        { title: 'Market Trends', content: data.marketTrends },
        { title: 'Key Players', content: data.keyPlayers },
        { title: 'Use Cases', content: data.useCases },
        { title: 'Challenges', content: data.challenges },
      ];

      sections.forEach((section) => {
        addText(section.title, 14, true);
        addText(section.content, 11);
        yPosition += 5;
      });

      // Footer
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'italic');
      pdf.text('Generated by GenAI-Scout Lite - Technology Intelligence Assistant', margin, pdf.internal.pageSize.getHeight() - 10);

      pdf.save(`${data.topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_analysis.pdf`);
    } catch (error) {
      console.error('PDF export error:', error);
      alert('Failed to export PDF. Please try again.');
    } finally {
      setIsExporting(null);
    }
  };

  const exportToMarkdown = () => {
    setIsExporting('markdown');
    try {
      const markdown = `# ${data.topic} - Technology Analysis

*Generated by GenAI-Scout Lite on ${new Date().toLocaleDateString()}*

## Technology Overview

${data.summary}

## Market Trends

${data.marketTrends}

## Key Players

${data.keyPlayers}

## Use Cases

${data.useCases}

## Challenges

${data.challenges}

---

*Powered by GenAI-Scout Lite - Technology Intelligence Assistant*
`;

      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${data.topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_analysis.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Markdown export error:', error);
      alert('Failed to export Markdown. Please try again.');
    } finally {
      setIsExporting(null);
    }
  };

  const generateShareableLink = async () => {
    setIsExporting('share');
    try {
      const response = await fetch('/api/create-share-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error('Failed to create shareable link');
      }

      const result = await response.json();
      setShareableLink(result.shareableUrl);
    } catch (error) {
      console.error('Share link error:', error);
      alert('Failed to create shareable link. Please try again.');
    } finally {
      setIsExporting(null);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Link copied to clipboard!');
    } catch (error) {
      console.error('Clipboard error:', error);
      alert('Failed to copy link to clipboard.');
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
      <h3 className="text-2xl font-bold text-gray-900 mb-6">Export & Share</h3>
      
      <div className="grid md:grid-cols-3 gap-6">
        {/* PDF Export */}
        <div className="border border-gray-200 rounded-lg p-6 text-center space-y-4">
          <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mx-auto">
            <FileText className="w-6 h-6 text-red-600" />
          </div>
          <div>
            <h4 className="font-semibold text-gray-900 mb-2">PDF Report</h4>
            <p className="text-sm text-gray-600 mb-4">
              Download a professional PDF report with all analysis sections.
            </p>
            <button
              onClick={exportToPDF}
              disabled={isExporting === 'pdf'}
              className="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 flex items-center justify-center space-x-2"
            >
              {isExporting === 'pdf' ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <Download className="w-4 h-4" />
                  <span>Download PDF</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Markdown Export */}
        <div className="border border-gray-200 rounded-lg p-6 text-center space-y-4">
          <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto">
            <FileText className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h4 className="font-semibold text-gray-900 mb-2">Markdown File</h4>
            <p className="text-sm text-gray-600 mb-4">
              Export as Markdown for easy editing and version control.
            </p>
            <button
              onClick={exportToMarkdown}
              disabled={isExporting === 'markdown'}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 flex items-center justify-center space-x-2"
            >
              {isExporting === 'markdown' ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <Download className="w-4 h-4" />
                  <span>Download MD</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Shareable Link */}
        <div className="border border-gray-200 rounded-lg p-6 text-center space-y-4">
          <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto">
            <Share2 className="w-6 h-6 text-green-600" />
          </div>
          <div>
            <h4 className="font-semibold text-gray-900 mb-2">Share Link</h4>
            <p className="text-sm text-gray-600 mb-4">
              Create a read-only link to share your analysis.
            </p>
            {!shareableLink ? (
              <button
                onClick={generateShareableLink}
                disabled={isExporting === 'share'}
                className="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 flex items-center justify-center space-x-2"
              >
                {isExporting === 'share' ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span>Creating...</span>
                  </>
                ) : (
                  <>
                    <Share2 className="w-4 h-4" />
                    <span>Create Link</span>
                  </>
                )}
              </button>
            ) : (
              <div className="space-y-2">
                <div className="p-2 bg-gray-50 rounded border text-xs text-gray-600 break-all">
                  {shareableLink}
                </div>
                <button
                  onClick={() => copyToClipboard(shareableLink)}
                  className="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors duration-200"
                >
                  Copy Link
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <p className="text-sm text-blue-800">
          <strong>ðŸ’¡ Tip:</strong> PDF exports are great for presentations and reports, 
          while Markdown files are perfect for documentation and further editing. 
          Shareable links allow others to view your analysis without downloading files.
        </p>
      </div>
    </div>
  );
}
